policy_module(xen, 1.13.0)

########################################
#
# Declarations
#
attribute xm_transition_domain;

## <desc>
## <p>
## Allow xend to run blktapctrl/tapdisk.
## Not required if using dedicated logical volumes for disk images.
## </p>
## </desc>
gen_tunable(xend_run_blktap, true)

## <desc>
## <p>
## Allow xend to run qemu-dm.
## Not required if using paravirt and no vfb.
## </p>
## </desc>
gen_tunable(xend_run_qemu, true)

## <desc>
## <p>
## Allow xen to manage nfs files
## </p>
## </desc>
gen_tunable(xen_use_nfs, false)

type blktap_t;
type blktap_exec_t;
domain_type(blktap_t)
domain_entry_file(blktap_t, blktap_exec_t)
role system_r types blktap_t;

type blktap_var_run_t;
files_pid_file(blktap_var_run_t)

type evtchnd_t;
type evtchnd_exec_t;
init_daemon_domain(evtchnd_t, evtchnd_exec_t)

# log files
type evtchnd_var_log_t;
logging_log_file(evtchnd_var_log_t)

# pid files
type evtchnd_var_run_t;
files_pid_file(evtchnd_var_run_t)

type qemu_dm_t;
type qemu_dm_exec_t;
domain_type(qemu_dm_t)
domain_entry_file(qemu_dm_t, qemu_dm_exec_t)
role system_r types qemu_dm_t;

# console ptys
type xen_devpts_t;
term_pty(xen_devpts_t)
files_type(xen_devpts_t)

# Xen Image files
type xen_image_t; # customizable
files_type(xen_image_t)
# xen_image_t can be assigned to blk devices
dev_node(xen_image_t)
virt_image(xen_image_t)

type xenctl_t;
files_type(xenctl_t)

type xend_t;
type xend_exec_t;
domain_type(xend_t)
init_daemon_domain(xend_t, xend_exec_t)

# tmp files
type xend_tmp_t;
files_tmp_file(xend_tmp_t)

# var/lib files
type xend_var_lib_t;
files_type(xend_var_lib_t)
# for mounting an NFS store
files_mountpoint(xend_var_lib_t)

# log files
type xend_var_log_t;
logging_log_file(xend_var_log_t)

# pid files
type xend_var_run_t;
files_pid_file(xend_var_run_t)
files_mountpoint(xend_var_run_t)

type xenstored_t;
type xenstored_exec_t;
init_daemon_domain(xenstored_t, xenstored_exec_t)

type xenstored_tmp_t;
files_tmp_file(xenstored_tmp_t)

# var/lib files
type xenstored_var_lib_t;
files_type(xenstored_var_lib_t)
files_mountpoint(xenstored_var_lib_t)

# log files
type xenstored_var_log_t;
logging_log_file(xenstored_var_log_t)

# pid files
type xenstored_var_run_t;
files_pid_file(xenstored_var_run_t)

type xenconsoled_t;
type xenconsoled_exec_t;
init_daemon_domain(xenconsoled_t, xenconsoled_exec_t)

# pid files
type xenconsoled_var_run_t;
files_pid_file(xenconsoled_var_run_t)

########################################
#
# blktap local policy
#
# Do we need to allow execution of blktap?
tunable_policy(`xend_run_blktap',`
        # If yes, transition to its own domain.
	domtrans_pattern(xend_t, blktap_exec_t, blktap_t)

',`
        # If no, then silently refuse to run it.
	dontaudit xend_t blktap_exec_t:file { execute execute_no_trans };
')

allow blktap_t self:fifo_file { read write };

dev_read_sysfs(blktap_t)
dev_rw_xen(blktap_t)


logging_send_syslog_msg(blktap_t)

xen_stream_connect_xenstore(blktap_t)

#######################################
#
# evtchnd local policy
#

manage_dirs_pattern(evtchnd_t, evtchnd_var_log_t, evtchnd_var_log_t)
manage_files_pattern(evtchnd_t, evtchnd_var_log_t, evtchnd_var_log_t)
logging_log_filetrans(evtchnd_t, evtchnd_var_log_t, { file dir })

manage_dirs_pattern(evtchnd_t, evtchnd_var_run_t, evtchnd_var_run_t)
manage_files_pattern(evtchnd_t, evtchnd_var_run_t, evtchnd_var_run_t)
manage_sock_files_pattern(evtchnd_t, evtchnd_var_run_t, evtchnd_var_run_t)
files_pid_filetrans(evtchnd_t, evtchnd_var_run_t, { file sock_file dir })

########################################
#
# qemu-dm local policy
#

# TODO: This part of policy should be removed
#       qemu-dm should run in xend_t domain

# Do we need to allow execution of qemu-dm?
tunable_policy(`xend_run_qemu',`
	allow qemu_dm_t self:capability sys_resource;
	allow qemu_dm_t self:process setrlimit;
	allow qemu_dm_t self:fifo_file { read write };
	allow qemu_dm_t self:tcp_socket create_stream_socket_perms;

	# If yes, transition to its own domain.
	domtrans_pattern(xend_t, qemu_dm_exec_t, qemu_dm_t)

	append_files_pattern(qemu_dm_t, xend_var_log_t, xend_var_log_t)

	rw_fifo_files_pattern(qemu_dm_t, xend_var_run_t, xend_var_run_t)

	corenet_tcp_bind_generic_node(qemu_dm_t)
	corenet_tcp_bind_vnc_port(qemu_dm_t)

	dev_rw_xen(qemu_dm_t)


	fs_manage_xenfs_dirs(qemu_dm_t)
	fs_manage_xenfs_files(qemu_dm_t)


	xen_stream_connect_xenstore(qemu_dm_t)
',`
        # If no, then silently refuse to run it.
	dontaudit xend_t qemu_dm_exec_t:file { execute execute_no_trans };
')

########################################
#
# xend local policy
#

allow xend_t self:capability { dac_read_search  ipc_lock net_admin setuid sys_admin sys_nice sys_tty_config net_raw sys_rawio };
allow xend_t self:process { signal sigkill };

# needed by qemu_dm
allow xend_t self:capability sys_resource;
allow xend_t self:process setrlimit;

# internal communication is often done using fifo and unix sockets.
allow xend_t self:fifo_file rw_fifo_file_perms;
allow xend_t self:unix_stream_socket create_stream_socket_perms;
allow xend_t self:unix_dgram_socket create_socket_perms;
allow xend_t self:netlink_route_socket r_netlink_socket_perms;
allow xend_t self:tcp_socket create_stream_socket_perms;
allow xend_t self:packet_socket create_socket_perms;
allow xend_t self:tun_socket create_socket_perms;

allow xend_t xen_image_t:dir list_dir_perms;
manage_dirs_pattern(xend_t, xen_image_t, xen_image_t)
manage_files_pattern(xend_t, xen_image_t, xen_image_t)
read_lnk_files_pattern(xend_t, xen_image_t, xen_image_t)
rw_blk_files_pattern(xend_t, xen_image_t, xen_image_t)

allow xend_t xenctl_t:fifo_file manage_fifo_file_perms;
dev_filetrans(xend_t, xenctl_t, fifo_file)

manage_files_pattern(xend_t, xend_tmp_t, xend_tmp_t)
manage_dirs_pattern(xend_t, xend_tmp_t, xend_tmp_t)
files_tmp_filetrans(xend_t, xend_tmp_t, { file dir })

# pid file
manage_dirs_pattern(xend_t, xend_var_run_t, xend_var_run_t)
manage_files_pattern(xend_t, xend_var_run_t, xend_var_run_t)
manage_sock_files_pattern(xend_t, xend_var_run_t, xend_var_run_t)
manage_fifo_files_pattern(xend_t, xend_var_run_t, xend_var_run_t)
files_pid_filetrans(xend_t, xend_var_run_t, { file sock_file fifo_file dir })

# log files
manage_dirs_pattern(xend_t, xend_var_log_t, xend_var_log_t)
manage_files_pattern(xend_t, xend_var_log_t, xend_var_log_t)
manage_sock_files_pattern(xend_t, xend_var_log_t, xend_var_log_t)
logging_log_filetrans(xend_t, xend_var_log_t, { sock_file file dir })

# var/lib files for xend
manage_dirs_pattern(xend_t, xend_var_lib_t, xend_var_lib_t)
manage_files_pattern(xend_t, xend_var_lib_t, xend_var_lib_t)
manage_sock_files_pattern(xend_t, xend_var_lib_t, xend_var_lib_t)
manage_fifo_files_pattern(xend_t, xend_var_lib_t, xend_var_lib_t)
files_var_lib_filetrans(xend_t, xend_var_lib_t, { file dir })

# transition to store
domtrans_pattern(xend_t, xenstored_exec_t, xenstored_t)

# manage xenstored pid file
manage_files_pattern(xend_t, xenstored_var_run_t, xenstored_var_run_t)

# mount tmpfs on /var/lib/xenstored
allow xend_t xenstored_var_lib_t:dir read;

# transition to console
domtrans_pattern(xend_t, xenconsoled_exec_t, xenconsoled_t)

kernel_read_kernel_sysctls(xend_t)
kernel_read_system_state(xend_t)
kernel_write_xen_state(xend_t)
kernel_read_xen_state(xend_t)
kernel_rw_net_sysctls(xend_t)
kernel_read_network_state(xend_t)
kernel_request_load_module(xend_t)

corecmd_exec_bin(xend_t)
corecmd_exec_shell(xend_t)

corenet_all_recvfrom_netlabel(xend_t)
corenet_tcp_sendrecv_generic_if(xend_t)
corenet_tcp_sendrecv_generic_node(xend_t)
corenet_tcp_sendrecv_all_ports(xend_t)
corenet_tcp_bind_generic_node(xend_t)
corenet_tcp_bind_xen_port(xend_t)
corenet_tcp_bind_soundd_port(xend_t)
corenet_tcp_bind_generic_port(xend_t)
corenet_tcp_bind_vnc_port(xend_t)
corenet_tcp_connect_xserver_port(xend_t)
corenet_tcp_connect_xen_port(xend_t)
corenet_sendrecv_xserver_client_packets(xend_t)
corenet_sendrecv_xen_server_packets(xend_t)
corenet_sendrecv_xen_client_packets(xend_t)
corenet_sendrecv_soundd_server_packets(xend_t)
corenet_rw_tun_tap_dev(xend_t)

dev_read_urand(xend_t)
# run lsscsi
dev_getattr_all_chr_files(xend_t)
dev_filetrans_xen(xend_t)
dev_rw_sysfs(xend_t)
dev_rw_xen(xend_t)

domain_dontaudit_read_all_domains_state(xend_t)

files_read_kernel_symbol_table(xend_t)
files_read_kernel_img(xend_t)
files_manage_etc_runtime_files(xend_t)
files_etc_filetrans_etc_runtime(xend_t, file)
files_read_default_symlinks(xend_t)

fs_read_removable_blk_files(xend_t)

storage_read_scsi_generic(xend_t)

term_setattr_generic_ptys(xend_t)
term_getattr_all_ptys(xend_t)
term_setattr_all_ptys(xend_t)
term_use_generic_ptys(xend_t)
term_use_ptmx(xend_t)
term_getattr_pty_fs(xend_t)

init_stream_connect_script(xend_t)

locallogin_dontaudit_use_fds(xend_t)

logging_send_syslog_msg(xend_t)

auth_read_passwd(xend_t)

miscfiles_read_hwdata(xend_t)

sysnet_domtrans_dhcpc(xend_t)
sysnet_signal_dhcpc(xend_t)
sysnet_domtrans_ifconfig(xend_t)
sysnet_dns_name_resolve(xend_t)
sysnet_delete_dhcpc_pid(xend_t)
sysnet_read_dhcpc_pid(xend_t)
sysnet_rw_dhcp_config(xend_t)

userdom_dontaudit_search_user_home_dirs(xend_t)

xen_stream_connect_xenstore(xend_t)

optional_policy(`
	brctl_domtrans(xend_t)
')

optional_policy(`
	consoletype_exec(xend_t)
')

optional_policy(`
	lvm_domtrans(xend_t)
')

optional_policy(`
	mount_domtrans(xend_t)
')

optional_policy(`	
	netutils_domtrans(xend_t)
')

optional_policy(`
	ptchown_exec(xend_t)
')

optional_policy(`
	virt_manage_default_image_type(xend_t)
	virt_search_images(xend_t)
	virt_read_config(xend_t)
')

########################################
#
# Xen console local policy
#

allow xenconsoled_t self:capability { dac_read_search fsetid ipc_lock sys_resource sys_tty_config };
allow xenconsoled_t self:process setrlimit;
allow xenconsoled_t self:unix_dgram_socket create_socket_perms;
allow xenconsoled_t self:unix_stream_socket create_stream_socket_perms;
allow xenconsoled_t self:fifo_file rw_fifo_file_perms;

allow xenconsoled_t xen_devpts_t:chr_file { rw_term_perms setattr };

# pid file
manage_files_pattern(xenconsoled_t, xenconsoled_var_run_t, xenconsoled_var_run_t)
manage_sock_files_pattern(xenconsoled_t, xenconsoled_var_run_t, xenconsoled_var_run_t)
files_pid_filetrans(xenconsoled_t, xenconsoled_var_run_t, { file sock_file })

kernel_read_kernel_sysctls(xenconsoled_t)
kernel_write_xen_state(xenconsoled_t)
kernel_read_xen_state(xenconsoled_t)

dev_rw_xen(xenconsoled_t)
dev_filetrans_xen(xenconsoled_t)
dev_rw_sysfs(xenconsoled_t)


fs_list_tmpfs(xenconsoled_t)
fs_manage_xenfs_dirs(xenconsoled_t)
fs_manage_xenfs_files(xenconsoled_t)

term_create_pty(xenconsoled_t, xen_devpts_t)
term_use_generic_ptys(xenconsoled_t)

init_use_fds(xenconsoled_t)
init_use_script_ptys(xenconsoled_t)

auth_read_passwd(xenconsoled_t)

xen_manage_log(xenconsoled_t)
xen_stream_connect_xenstore(xenconsoled_t)

optional_policy(`
	ptchown_domtrans(xenconsoled_t)
')

########################################
#
# Xen store local policy
#

allow xenstored_t self:capability { dac_read_search  ipc_lock sys_resource };
allow xenstored_t self:unix_stream_socket create_stream_socket_perms;
allow xenstored_t self:unix_dgram_socket create_socket_perms;

manage_files_pattern(xenstored_t, xenstored_tmp_t, xenstored_tmp_t)
manage_dirs_pattern(xenstored_t, xenstored_tmp_t, xenstored_tmp_t)
files_tmp_filetrans(xenstored_t, xenstored_tmp_t, { file dir })

# pid file
manage_dirs_pattern(xenstored_t, xenstored_var_run_t, xenstored_var_run_t)
manage_files_pattern(xenstored_t, xenstored_var_run_t, xenstored_var_run_t)
manage_sock_files_pattern(xenstored_t, xenstored_var_run_t, xenstored_var_run_t)
files_pid_filetrans(xenstored_t, xenstored_var_run_t, { file sock_file dir })

# log files
manage_dirs_pattern(xenstored_t, xenstored_var_log_t, xenstored_var_log_t)
manage_files_pattern(xenstored_t, xenstored_var_log_t, xenstored_var_log_t)
manage_sock_files_pattern(xenstored_t, xenstored_var_log_t, xenstored_var_log_t)
logging_log_filetrans(xenstored_t, xenstored_var_log_t, { sock_file file dir })

# var/lib files for xenstored
manage_dirs_pattern(xenstored_t, xenstored_var_lib_t, xenstored_var_lib_t)
manage_files_pattern(xenstored_t, xenstored_var_lib_t, xenstored_var_lib_t)
manage_sock_files_pattern(xenstored_t, xenstored_var_lib_t, xenstored_var_lib_t)
files_var_lib_filetrans(xenstored_t, xenstored_var_lib_t, { file dir sock_file })

stream_connect_pattern(xenstored_t, evtchnd_var_run_t, evtchnd_var_run_t, evtchnd_t)

auth_use_nsswitch(xenstored_t)

can_exec(xenstored_t, xenstored_exec_t)

kernel_write_xen_state(xenstored_t)
kernel_read_xen_state(xenstored_t)

corecmd_exec_bin(xenstored_t)

dev_filetrans_xen(xenstored_t)
dev_rw_xen(xenstored_t)
dev_read_sysfs(xenstored_t)

fs_search_xenfs(xenstored_t)
fs_manage_xenfs_files(xenstored_t)

term_use_generic_ptys(xenstored_t)
term_use_console(xenconsoled_t)

init_use_fds(xenstored_t)
init_use_script_ptys(xenstored_t)

logging_send_syslog_msg(xenstored_t)

xen_append_log(xenstored_t)

optional_policy(`
	virt_read_config(xenstored_t)
')

########################################
#
# SSH component local policy
#
optional_policy(`
	#Should have a boolean wrapping these
	fs_list_auto_mountpoints(xend_t)
	files_search_mnt(xend_t)
	fs_getattr_all_fs(xend_t)
	fs_read_dos_files(xend_t)
	fs_manage_xenfs_dirs(xend_t)
	fs_manage_xenfs_files(xend_t)

	tunable_policy(`xen_use_nfs',`
		fs_manage_nfs_files(xend_t)
		fs_read_nfs_symlinks(xend_t)
	')
')
