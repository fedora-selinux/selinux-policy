## <summary>>A scalable high-availability cluster resource manager.</summary>

########################################
## <summary>
##	Transition to pacemaker.
## </summary>
## <param name="domain">
## <summary>
##	Domain allowed to transition.
## </summary>
## </param>
#
interface(`pacemaker_domtrans',`
	gen_require(`
		type pacemaker_t, pacemaker_exec_t;
	')

	corecmd_search_bin($1)
	domtrans_pattern($1, pacemaker_exec_t, pacemaker_t)
')

########################################
## <summary>
##	Execute pacemaker server in the pacemaker domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`pacemaker_initrc_domtrans',`
	gen_require(`
		type pacemaker_initrc_exec_t;
	')

	init_labeled_script_domtrans($1, pacemaker_initrc_exec_t)
')

########################################
## <summary>
##	Search pacemaker lib directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`pacemaker_search_lib',`
	gen_require(`
		type pacemaker_var_lib_t;
	')

	allow $1 pacemaker_var_lib_t:dir search_dir_perms;
	files_search_var_lib($1)
')

########################################
## <summary>
##	Read pacemaker lib files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`pacemaker_read_lib_files',`
	gen_require(`
		type pacemaker_var_lib_t;
	')

	files_search_var_lib($1)
	read_files_pattern($1, pacemaker_var_lib_t, pacemaker_var_lib_t)
')

########################################
## <summary>
##	Manage pacemaker lib files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`pacemaker_manage_lib_files',`
	gen_require(`
		type pacemaker_var_lib_t;
	')

	files_search_var_lib($1)
	manage_files_pattern($1, pacemaker_var_lib_t, pacemaker_var_lib_t)
')

########################################
## <summary>
##	Manage pacemaker lib directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`pacemaker_manage_lib_dirs',`
	gen_require(`
		type pacemaker_var_lib_t;
	')

	files_search_var_lib($1)
	manage_dirs_pattern($1, pacemaker_var_lib_t, pacemaker_var_lib_t)
')

########################################
## <summary>
##	Read pacemaker PID files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`pacemaker_read_pid_files',`
	gen_require(`
		type pacemaker_var_run_t;
	')

	files_search_pids($1)
	allow $1 pacemaker_var_run_t:file read_file_perms;
')

########################################
## <summary>
##	Execute pacemaker server in the pacemaker domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to transition.
##	</summary>
## </param>
#
interface(`pacemaker_systemctl',`
	gen_require(`
		type pacemaker_t;
		type pacemaker_unit_file_t;
	')

	systemd_exec_systemctl($1)
	init_reload_services($1)
	systemd_read_fifo_file_passwd_run($1)
	allow $1 pacemaker_unit_file_t:file read_file_perms;
	allow $1 pacemaker_unit_file_t:service manage_service_perms;

	ps_process_pattern($1, pacemaker_t)
')


########################################
## <summary>
##	All of the rules required to administrate
##	an pacemaker environment
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	Role allowed access.
##	</summary>
## </param>
## <rolecap/>
#
interface(`pacemaker_admin',`
	gen_require(`
		type pacemaker_t;
		type pacemaker_initrc_exec_t;
		type pacemaker_var_lib_t;
		type pacemaker_var_run_t;
		type pacemaker_unit_file_t;
	')

	allow $1 pacemaker_t:process { ptrace signal_perms };
	ps_process_pattern($1, pacemaker_t)

	pacemaker_initrc_domtrans($1)
	domain_system_change_exemption($1)
	role_transition $2 pacemaker_initrc_exec_t system_r;
	allow $2 system_r;

	files_search_var_lib($1)
	admin_pattern($1, pacemaker_var_lib_t)

	files_search_pids($1)
	admin_pattern($1, pacemaker_var_run_t)

	pacemaker_systemctl($1)
	admin_pattern($1, pacemaker_unit_file_t)
	allow $1 pacemaker_unit_file_t:service all_service_perms;

	optional_policy(`
		systemd_passwd_agent_exec($1)
		systemd_read_fifo_file_passwd_run($1)
	')
')
