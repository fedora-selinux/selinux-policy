## <summary>Andrew Filesystem server.</summary>

########################################
## <summary>
##	Execute a domain transition to run the
##	afs client.
## </summary>
## <param name="domain">
## <summary>
##	Domain allowed to transition.
## </summary>
## </param>
#
interface(`afs_domtrans',`
	gen_require(`
		type afs_t, afs_exec_t;
	')

	corecmd_search_bin($1)
	domtrans_pattern($1, afs_exec_t, afs_t)
')

########################################
## <summary>
##	Read and write afs client UDP sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`afs_rw_udp_sockets',`
	gen_require(`
		type afs_t;
	')

	allow $1 afs_t:udp_socket { read write };
')

########################################
## <summary>
##	Read AFS config data
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`afs_read_config',`
	gen_require(`
		type afs_config_t;
	')

	read_files_pattern($1, afs_config_t, afs_config_t)
')

########################################
## <summary>
##	Read and write afs cache files.
## </summary>
## <param name="domain">
## <summary>
##	Domain allowed access.
## </summary>
## </param>
#
interface(`afs_rw_cache',`
	gen_require(`
		type afs_cache_t;
	')

	files_search_var($1)
	allow $1 afs_cache_t:file { read write };
')

########################################
## <summary>
##	Execute afs server in the afs domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to transition.
##	</summary>
## </param>
#
interface(`afs_initrc_domtrans',`
	gen_require(`
		type afs_initrc_exec_t;
	')

	init_labeled_script_domtrans($1, afs_initrc_exec_t)
')

########################################
## <summary>
##	All of the rules required to
##	administrate an afs environment.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	Role allowed access.
##	</summary>
## </param>
## <rolecap/>
#
interface(`afs_admin',`
	gen_require(`
		attribute afs_domain;
		type afs_t, afs_initrc_exec_t, afs_dbdir_t, afs_pt_db_t;
		type afs_ka_db_t, afs_vl_db_t, afs_config_t;
		type afs_logfile_t, afs_cache_t, afs_files_t;
	')

	allow $1 afs_t:process signal_perms;
	ps_process_pattern($1, afs_t)

	tunable_policy(`deny_ptrace',`',`
		allow $1 afs_t:process ptrace;
	')

	afs_initrc_domtrans($1)
	domain_system_change_exemption($1)
	role_transition $2 afs_initrc_exec_t system_r;
	allow $2 system_r;

	files_search_etc($1)
	admin_pattern($1, afs_config_t)

	files_search_var($1)
	admin_pattern($1, afs_cache_t)

	files_search_var_lib($1)
	admin_pattern($1, { afs_dbdir_t afs_pt_db_t afs_ka_db_t })
	admin_pattern($1, afs_vl_db_t)

	logging_search_logs($1)
	admin_pattern($1, afs_logfile_t)

	admin_pattern($1, afs_files_t)
')
